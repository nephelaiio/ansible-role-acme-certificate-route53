---
- name: set variable overrides
  ansible.builtin.set_fact:
    _acme_certificate_packages: "{{ acme_certificate_packages | default(_pacakges_default) }}"
    _acme_certificate_storedir: "{{ acme_certificate_storedir | default(_storedir_default) }}"
    _acme_certificate_pips: "{{ acme_certificate_pips | default(_pip_default) }}"
  vars:
    overrides:
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
      - "{{ ansible_distribution | lower }}"
      - "{{ ansible_os_family | lower }}"
      - "default"
    _packages_default: "{{ acme_certificate_packages_default | sorted_get(overrides) }}"
    _storedir_default: "{{ acme_certificate_storedir_default | sorted_get(overrides) }}"
    _pip_default: "{{ acme_certificate_pips_default | sorted_get(overrides) }}"
  tags:
    - always

- name: install package requirements
  ansible.builtin.package:
    name: "{{ _acme_certificate_packages }}"

- name: install pip requirements
  ansible.builtin.pip:
    name: "{{ _acme_certificate_pips }}"
  changed_when: false
  when: _acme_certificate_pips != []


- name: create acme group
  ansible.builtin.group:
    name: "{{ acme_certificate_group }}"

- name: add users to acme group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "{{ acme_certificate_group }}"
    append: yes
  loop: "{{ acme_certificate_group_members | flatten(levels=1) }}"

- name: create acme folders
  ansible.builtin.file:
    path: "{{ item }}"
    mode: 0755
    state: directory
    group: "{{ acme_certificate_group }}"
  loop:
    - "{{ acme_certificate_certdir }}"
    - "{{ acme_certificate_keydir }}"

- name: create account key
  community.crypto.openssl_privatekey:
    path: "{{ acme_certificate_account_keyfile }}"
    owner: root
    group: "{{ acme_certificate_group }}"
    mode: 0640

- name: create domain key
  community.crypto.openssl_privatekey:
    path: "{{ _acme_certificate_domain_keyfile }}"
    owner: root
    group: "{{ acme_certificate_group }}"
    mode: 0640

- name: create csr
  community.crypto.openssl_csr:
    path: "{{ _acme_certificate_domain_csrfile }}"
    privatekey_path: "{{ _acme_certificate_domain_keyfile }}"
    common_name: "{{ acme_certificate_domain }}"

- name: create acme challenge
  community.crypto.acme_certificate:
    account_key: "{{ acme_certificate_account_keyfile }}"
    challenge: dns-01
    csr: "{{ _acme_certificate_domain_csrfile }}"
    dest: "{{ _acme_certificate_domain_crtfile }}"
    fullchain_dest: "{{ _acme_certificate_domain_chainfile }}"
    terms_agreed: yes
    acme_version: "{{ acme_certificate_api_version }}"
    acme_directory: "{{ acme_certificate_directory }}"
  register: acme_certificate_challenge

- name: validate acme challenge
  when: acme_certificate_challenge is changed
  block:

    - name: create route53 txt record for certificate validation
      community.aws.route53:
        command: create
        aws_access_key: "{{ acme_certificate_aws_accesskey_id }}"
        aws_secret_key: "{{ acme_certificate_aws_accesskey_secret }}"
        zone: "{{ acme_certificate_zone }}"
        type: TXT
        record: '{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["record"] }}'
        value: '"{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["resource_value"] }}"'
        ttl: "{{ acme_certificate_challenge_ttl }}"
        wait: yes
        overwrite: yes

    - name: wait for txt record expiration
      ansible.builtin.pause:
        seconds: "{{ (acme_certificate_challenge_ttl | int) * 2 }}"

    - name: validate challenge
      community.crypto.acme_certificate:
        account_key: "{{ acme_certificate_account_keyfile }}"
        challenge: dns-01
        csr: "{{ _acme_certificate_domain_csrfile }}"
        dest: "{{ _acme_certificate_domain_crtfile }}"
        fullchain_dest: "{{ _acme_certificate_domain_chainfile }}"
        data: "{{ acme_certificate_challenge }}"
        terms_agreed: yes
        acme_directory: "{{ acme_certificate_directory }}"
        acme_version: "{{ acme_certificate_api_version }}"
      delay: "{{ acme_certificate_challenge_ttl }}"

  always:

    - name: delete route53 txt record for certificate validation
      community.aws.route53:
        command: delete
        aws_access_key: "{{ acme_certificate_aws_accesskey_id }}"
        aws_secret_key: "{{ acme_certificate_aws_accesskey_secret }}"
        zone: "{{ acme_certificate_zone }}"
        type: TXT
        record: '{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["record"] }}'
        value: '"{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["resource_value"] }}"'
        ttl: "{{ acme_certificate_challenge_ttl }}"
        wait: yes

- name: retrieve acme root ca file
  ansible.builtin.get_url:
    url: "{{ acme_certificate_caurl }}"
    dest: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
    mode: 0644

- name: retrieve acme intermediate ca file
  ansible.builtin.get_url:
    url: "{{ acme_certificate_intcaurl }}"
    dest: "{{ acme_certificate_certdir }}/{{ _acme_certificate_intcafile }}"
    mode: 0644

- name: configure local certificate chain
  when: acme_certificate_add_ca | bool
  block:

    - name: create acme ca root dir
      ansible.builtin.file:
        state: directory
        dest: "{{ _acme_certificate_storedir }}"

    - name: copy acme root ca file to trust store
      ansible.builtin.copy:
        mode: preserve
        remote_src: yes
        src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
        dest: "{{ _acme_certificate_storedir }}/{{ _acme_certificate_cafile }}"

    - name: update ca certificates
      ansible.builtin.command: update-ca-certificates
      changed_when: false
      when: ansible_os_family == 'Debian'

    - name: update ca certificates
      ansible.builtin.command: update-ca-trust extract
      changed_when: false
      when: ansible_os_family == 'RedHat'

- name: set certificate file link
  ansible.builtin.file:
    state: link
    src: "{{ _acme_certificate_domain_crtfile }}"
    dest: "{{ acme_certificate_certfile }}"
  when: acme_certificate_certfile is defined

- name: set certificate chain link
  ansible.builtin.file:
    state: link
    src: "{{ _acme_certificate_domain_chainfile }}"
    dest: "{{ acme_certificate_chainfile }}"
  when: acme_certificate_chainfile is defined

- name: set certificate key link
  ansible.builtin.file:
    state: link
    src: "{{ _acme_certificate_domain_keyfile }}"
    dest: "{{ acme_certificate_keyfile }}"
  when: acme_certificate_keyfile is defined

- name: set ca file link
  ansible.builtin.file:
    state: link
    src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
    dest: "{{ acme_certificate_cafile }}"
  when: acme_certificate_cafile is defined

- name: set intca file link
  ansible.builtin.file:
    state: link
    src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_intcafile }}"
    dest: "{{ acme_certificate_intcafile }}"
  when: acme_certificate_intcafile is defined
