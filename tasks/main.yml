---
- name: Check AWS authentication params
  block:
    - name: Check acme_certificate_cf_account_token vardef
      ansible.builtin.assert:
        that:
          - acme_certificate_aws_accesskey_id is defined
          - acme_certificate_aws_accesskey_id != ""
        fail_msg: acme_certificate_aws_accesskey_id is required

    - name: Check acme_certificate_api_email vardef
      ansible.builtin.assert:
        that:
          - acme_certificate_aws_accesskey_secret is defined
          - acme_certificate_aws_accesskey_secret != ""
        fail_msg: acme_certificate_aws_accesskey_secret is required

- name: Check acme ca certificate params
  ansible.builtin.assert:
    that: acme_certificate_caurl is defined
    fail_msg: acme_certificate_caurl is required if acme_certificate_add_ca is set
  when: acme_certificate_add_ca | bool

- name: Include variable overrides
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "vars/{{ ansible_distribution }}.yml"
        - "vars/{{ ansible_os_family }}.yml"
        - "vars/main.yml"

- name: Install package requirements
  ansible.builtin.package:
    name: "{{ acme_certificate_packages }}"

- name: Install pip requirements
  ansible.builtin.pip:
    name:
      - dnspython
      - cryptography
  changed_when: false

- name: Create acme group
  ansible.builtin.group:
    name: "{{ acme_certificate_group }}"

- name: Add users to acme group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "{{ acme_certificate_group }}"
    append: true
  loop: "{{ acme_certificate_group_members | flatten(levels=1) }}"

- name: Create acme folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    group: "{{ acme_certificate_group }}"
    mode: "u=rw,g=r,o="
  loop:
    - "{{ acme_certificate_certdir }}"
    - "{{ acme_certificate_keydir }}"

- name: Create account key
  community.crypto.openssl_privatekey:
    path: "{{ acme_certificate_account_keyfile }}"
    owner: root
    group: "{{ acme_certificate_group }}"
    mode: "u=rw,g=r,o="

- name: Create domain key
  community.crypto.openssl_privatekey:
    path: "{{ _acme_certificate_domain_keyfile }}"
    owner: root
    group: "{{ acme_certificate_group }}"
    mode: "u=rw,g=r,o="

- name: Create csr
  community.crypto.openssl_csr:
    path: "{{ _acme_certificate_domain_csrfile }}"
    privatekey_path: "{{ _acme_certificate_domain_keyfile }}"
    common_name: "{{ acme_certificate_domain }}"

- name: Create acme challenge
  community.crypto.acme_certificate:
    account_key: "{{ acme_certificate_account_keyfile }}"
    challenge: dns-01
    csr: "{{ _acme_certificate_domain_csrfile }}"
    dest: "{{ _acme_certificate_domain_crtfile }}"
    fullchain_dest: "{{ _acme_certificate_domain_chainfile }}"
    terms_agreed: true
    acme_version: "{{ acme_certificate_api_version }}"
    acme_directory: "{{ acme_certificate_directory }}"
  register: acme_certificate_challenge

- name: Validate acme challenge
  when: acme_certificate_challenge is changed
  block:
    - name: Create route53 dns challenge record
      amazon.aws.route53:
        command: create
        aws_access_key: "{{ acme_certificate_aws_accesskey_id }}"
        aws_secret_key: "{{ acme_certificate_aws_accesskey_secret }}"
        zone: "{{ acme_certificate_zone }}"
        type: TXT
        record: '{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["record"] }}'
        value: '"{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["resource_value"] }}"'
        ttl: "{{ acme_certificate_challenge_ttl }}"
        wait: true
        overwrite: true
      retries: 5
      delay: 60
      register: acme_validation
      until: acme_validation is succeeded

    - name: Wait for txt record replication
      ansible.builtin.pause:
        seconds: "{{ acme_certificate_challenge_wait }}"

    - name: Validate challenge
      community.crypto.acme_certificate:
        account_key: "{{ acme_certificate_account_keyfile }}"
        challenge: dns-01
        csr: "{{ _acme_certificate_domain_csrfile }}"
        dest: "{{ _acme_certificate_domain_crtfile }}"
        fullchain_dest: "{{ _acme_certificate_domain_chainfile }}"
        data: "{{ acme_certificate_challenge }}"
        terms_agreed: true
        acme_directory: "{{ acme_certificate_directory }}"
        acme_version: "{{ acme_certificate_api_version }}"
      delay: "{{ acme_certificate_challenge_ttl }}"

  always:
    - name: Delete route53 dns challenge record
      amazon.aws.route53:
        command: delete
        aws_access_key: "{{ acme_certificate_aws_accesskey_id }}"
        aws_secret_key: "{{ acme_certificate_aws_accesskey_secret }}"
        zone: "{{ acme_certificate_zone }}"
        type: TXT
        record: '{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["record"] }}'
        value: '"{{ acme_certificate_challenge.challenge_data[acme_certificate_domain]["dns-01"]["resource_value"] }}"'
        ttl: "{{ acme_certificate_challenge_ttl }}"
        wait: true
      retries: 5
      delay: 60
      register: acme_validation
      until: acme_validation is succeeded

- name: Manage acme root ca file
  when: acme_certificate_caurl is defined
  vars:
    _acme_certificate_base: "{{ acme_certificate_caurl | urlsplit('path') | basename }}"
    _acme_certificate_host: "{{ acme_certificate_caurl | urlsplit('hostname') }}"
    _acme_certificate_cafile: "{{ _acme_certificate_base if (_acme_certificate_base != '') else (_acme_certificate_host + '.crt') }}"
  block:
    - name: Retrieve acme root ca file
      ansible.builtin.get_url:
        url: "{{ acme_certificate_caurl }}"
        dest: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
        mode: "u=rw,go=r"

    - name: Create acme root ca file link
      ansible.builtin.file:
        state: link
        src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
        dest: "{{ acme_certificate_cafile }}"
      when: acme_certificate_cafile is defined

    - name: Configure local certificate chain
      when: acme_certificate_add_ca | bool
      block:
        - name: Stat acme ca root dir
          ansible.builtin.stat:
            path: "{{ acme_certificate_storedir }}"
          register: _storedir_query

        - name: Create acme ca root dir
          ansible.builtin.file:
            state: directory
            dest: "{{ _acme_certificate_storedir }}"
            mode: "u=rwx,go=rx"
          when: not _storedir_query.stat.exists

        - name: Copy acme root ca file to trust store
          ansible.builtin.copy:
            mode: preserve
            remote_src: true
            src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_cafile }}"
            dest: "{{ _acme_certificate_storedir }}/{{ _acme_certificate_cafile }}"

        - name: Update ca certificates
          ansible.builtin.command: update-ca-certificates
          changed_when: false
          when: ansible_os_family == 'Debian'

        - name: Update ca certificates
          ansible.builtin.command: update-ca-trust extract
          changed_when: false
          when: ansible_os_family == 'RedHat'

- name: Manage acme intermediate ca file
  when: acme_certificate_intcaurl is defined
  vars:
    _acme_certificate_intcafile: "{{ acme_certificate_intcaurl | urlsplit('path') | basename }}"
  block:
    - name: Retrieve acme intermediate ca file
      ansible.builtin.get_url:
        url: "{{ acme_certificate_intcaurl }}"
        dest: "{{ acme_certificate_certdir }}/{{ _acme_certificate_intcafile }}"
        mode: 0644

    - name: Set intca file link
      ansible.builtin.file:
        state: link
        src: "{{ acme_certificate_certdir }}/{{ _acme_certificate_intcafile }}"
        dest: "{{ acme_certificate_intcafile }}"
      when: acme_certificate_intcafile is defined

- name: Create certificate file link
  ansible.builtin.file:
    state: link
    src: "{{ acme_certificate_certdir }}/{{ acme_certificate_domain }}.crt"
    dest: "{{ acme_certificate_file }}"
  when: acme_certificate_file is defined

- name: Create certificate chain link
  ansible.builtin.file:
    state: link
    src: "{{ acme_certificate_certdir }}/{{ acme_certificate_domain }}.chain.crt"
    dest: "{{ acme_certificate_chainfile }}"
  when: acme_certificate_chainfile is defined

- name: Create certificate key link
  ansible.builtin.file:
    state: link
    src: "{{ acme_certificate_keydir }}/id_rsa.{{ acme_certificate_domain }}"
    dest: "{{ acme_certificate_keyfile }}"
  when: acme_certificate_keyfile is defined
